package main

import (
    "fmt"
)

type Int = int
type ComparisonResult int

const (
    Less ComparisonResult = iota
    Equal ComparisonResult
    Greater ComparisonResult
)

func <Int> Compare(a, b Int) ComparisonResult {
    if a < b {
        return Less
    } else if a == b {
        return Equal
    } else {
        return Greater
    }
}

func <Int> Min(nums []Int) Int {
    min := nums[0]
    for i := 1; i < len(nums); i++ {
        if nums[i] < min {
            min = nums[i]
        }
    }
    return min
}

func <Int> Max(nums []Int) Int {
    max := nums[0]
    for i := 1; i < len(nums); i++ {
        if nums[i] > max {
            max = nums[i]
        }
    }
    return max
}

type Comparable interface {
    <T> Compare(a, b T) ComparisonResult
    <T> Min(instances []T) T
    <T> Max(instances []T) T
}

type Range<T> struct {
    min, max T
}

func (r Range<T>) String() string {
    return "implement"
}

func RangeOf<T Comparable>(xs []T) Range<T> {
    min := T.Min(xs)
    max := T.Max(xs)
    return Range<T>{min, max}
}

func main() {
    fmt.Println(RangeOf<Int>([]Int{2, 1, 4, 3, 5, 4, 2}).String())
}
